// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: balance.proto

package trading_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BalanceServiceClient is the client API for BalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalanceServiceClient interface {
	UpdateUserBalance(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error)
	GetUserByID(ctx context.Context, in *UserGetByIDRequest, opts ...grpc.CallOption) (*UserGetByIDResponse, error)
	CreateUserBalance(ctx context.Context, in *CreateBalanceRequest, opts ...grpc.CallOption) (*CreateBalanceResponse, error)
	DeleteUserBalance(ctx context.Context, in *DeleteBalanceRequest, opts ...grpc.CallOption) (*DeleteBalanceResponse, error)
	GetAllUserBalances(ctx context.Context, in *GetAllBalanceRequest, opts ...grpc.CallOption) (*GetAllBalanceResponse, error)
}

type balanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalanceServiceClient(cc grpc.ClientConnInterface) BalanceServiceClient {
	return &balanceServiceClient{cc}
}

func (c *balanceServiceClient) UpdateUserBalance(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*UserUpdateResponse, error) {
	out := new(UserUpdateResponse)
	err := c.cc.Invoke(ctx, "/BalanceService/UpdateUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) GetUserByID(ctx context.Context, in *UserGetByIDRequest, opts ...grpc.CallOption) (*UserGetByIDResponse, error) {
	out := new(UserGetByIDResponse)
	err := c.cc.Invoke(ctx, "/BalanceService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) CreateUserBalance(ctx context.Context, in *CreateBalanceRequest, opts ...grpc.CallOption) (*CreateBalanceResponse, error) {
	out := new(CreateBalanceResponse)
	err := c.cc.Invoke(ctx, "/BalanceService/CreateUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) DeleteUserBalance(ctx context.Context, in *DeleteBalanceRequest, opts ...grpc.CallOption) (*DeleteBalanceResponse, error) {
	out := new(DeleteBalanceResponse)
	err := c.cc.Invoke(ctx, "/BalanceService/DeleteUserBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *balanceServiceClient) GetAllUserBalances(ctx context.Context, in *GetAllBalanceRequest, opts ...grpc.CallOption) (*GetAllBalanceResponse, error) {
	out := new(GetAllBalanceResponse)
	err := c.cc.Invoke(ctx, "/BalanceService/GetAllUserBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BalanceServiceServer is the server API for BalanceService service.
// All implementations must embed UnimplementedBalanceServiceServer
// for forward compatibility
type BalanceServiceServer interface {
	UpdateUserBalance(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	GetUserByID(context.Context, *UserGetByIDRequest) (*UserGetByIDResponse, error)
	CreateUserBalance(context.Context, *CreateBalanceRequest) (*CreateBalanceResponse, error)
	DeleteUserBalance(context.Context, *DeleteBalanceRequest) (*DeleteBalanceResponse, error)
	GetAllUserBalances(context.Context, *GetAllBalanceRequest) (*GetAllBalanceResponse, error)
	mustEmbedUnimplementedBalanceServiceServer()
}

// UnimplementedBalanceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBalanceServiceServer struct {
}

func (UnimplementedBalanceServiceServer) UpdateUserBalance(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBalance not implemented")
}
func (UnimplementedBalanceServiceServer) GetUserByID(context.Context, *UserGetByIDRequest) (*UserGetByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedBalanceServiceServer) CreateUserBalance(context.Context, *CreateBalanceRequest) (*CreateBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserBalance not implemented")
}
func (UnimplementedBalanceServiceServer) DeleteUserBalance(context.Context, *DeleteBalanceRequest) (*DeleteBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserBalance not implemented")
}
func (UnimplementedBalanceServiceServer) GetAllUserBalances(context.Context, *GetAllBalanceRequest) (*GetAllBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserBalances not implemented")
}
func (UnimplementedBalanceServiceServer) mustEmbedUnimplementedBalanceServiceServer() {}

// UnsafeBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalanceServiceServer will
// result in compilation errors.
type UnsafeBalanceServiceServer interface {
	mustEmbedUnimplementedBalanceServiceServer()
}

func RegisterBalanceServiceServer(s grpc.ServiceRegistrar, srv BalanceServiceServer) {
	s.RegisterService(&BalanceService_ServiceDesc, srv)
}

func _BalanceService_UpdateUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).UpdateUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BalanceService/UpdateUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).UpdateUserBalance(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BalanceService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).GetUserByID(ctx, req.(*UserGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_CreateUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).CreateUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BalanceService/CreateUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).CreateUserBalance(ctx, req.(*CreateBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_DeleteUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).DeleteUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BalanceService/DeleteUserBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).DeleteUserBalance(ctx, req.(*DeleteBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BalanceService_GetAllUserBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BalanceServiceServer).GetAllUserBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BalanceService/GetAllUserBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BalanceServiceServer).GetAllUserBalances(ctx, req.(*GetAllBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BalanceService_ServiceDesc is the grpc.ServiceDesc for BalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BalanceService",
	HandlerType: (*BalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserBalance",
			Handler:    _BalanceService_UpdateUserBalance_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _BalanceService_GetUserByID_Handler,
		},
		{
			MethodName: "CreateUserBalance",
			Handler:    _BalanceService_CreateUserBalance_Handler,
		},
		{
			MethodName: "DeleteUserBalance",
			Handler:    _BalanceService_DeleteUserBalance_Handler,
		},
		{
			MethodName: "GetAllUserBalances",
			Handler:    _BalanceService_GetAllUserBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "balance.proto",
}
